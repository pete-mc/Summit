name: Build and Release Flutter
on:
  push:
    branches:
      - main
      - 2.5.0
    paths:
      - 'flutter/**'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: false

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js environment
      uses: actions/setup-node@v4

    - name: Install jq
      run: sudo apt-get install jq

    - name: Extract version
      id: get_version
      run: |
        if [[ -z "${{ github.event.inputs.version }}" ]]; then
          cd flutter_app
          VERSION=$(grep 'version:' pubspec.yaml | sed 's/version: //')
          VERSION="flutter-$VERSION"
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Print version
      run: echo "Version is ${{ env.VERSION }}"

    - name: Check if release already exists
      id: check_release
      run: |
        RELEASE=$(curl --silent "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/tags/${{ steps.get_version.outputs.VERSION }}" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" || echo '{"message": "Not Found"}')
        MESSAGE=$(echo $RELEASE | jq -r .message)
        if [[ $MESSAGE == "Not Found" ]]; then
          echo "Release with version ${{ steps.get_version.outputs.VERSION }} does not exist."
        else
          echo "Release with version ${{ steps.get_version.outputs.VERSION }} already exists."
          exit 1
        fi

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.16.5' 

    - name: Build and sign Flutter app
      run: |
        echo ${{ secrets.PLAY_UPLOAD_KEYSTORE }} | base64 --decode > ./flutter_app/android/app/upload-key.keystore
        export PLAY_UPLOAD_ALIAS=${{ secrets.PLAY_UPLOAD_ALIAS }}
        export PLAY_UPLOAD_PASSWORD=${{ secrets.PLAY_UPLOAD_PASSWORD }}
        export PLAY_UPLOAD_KEYSTORE=./upload-key.keystore
        cd flutter_app
        flutter pub get
        flutter build appbundle --release --build-name=${{ env.VERSION }} --target-platform android-arm,android-arm64,android-x64 --obfuscate --split-debug-info=./debug

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: Flutter-${{ steps.get_version.outputs.VERSION }}
        release_name: Release ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false

    - name: Upload debug info as artifact
      uses: actions/upload-artifact@v4
      with:
        name: debug-info
        path: ./flutter_app/debug

    - name: Upload AAB as artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-app
        path: ./flutter_app/build/app/outputs/bundle/release/app-release.aab

    - name: Upload AAB Release Asset
      if: github.ref == 'refs/heads/main'
      id: upload-aab-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./flutter_app/build/app/outputs/bundle/release/app-release.aab
        asset_name: app-release.aab
        asset_content_type: application/vnd.android.package-archive
  
    - name: Upload to Google Play
      continue-on-error: true
      if: github.ref == 'refs/heads/main'
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
        packageName: xyz.mcdonald.terrainsummit
        releaseFiles: ./flutter_app/build/app/outputs/bundle/release/app-release.aab
        track: alpha
        status: completed
        releaseName: ${{ steps.get_version.outputs.VERSION }}
        deobfuscationFiles: ./flutter_app/debug